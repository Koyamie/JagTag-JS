{
    "docs": [
        {
            "location": "/",
            "text": "The JagTag-JS Docs\n\u00b6\n\n\nWelcome to the documentation for JagTag-JS! On this site you can find information about JagTag-JS, aimed to give both end users and developers comprehensive information about the language, the library and the implementation of JagTag.\n\n\nIf you wish to cut to the chase, select the \nDevelopers\n or \nUsers\n section from the menu on the left.\n\n\nOtherwise, feel free to keep on reading!\n\n\nIntroduction\n\u00b6\n\n\nJagTag (And by the same token JagTag-JS) can be used to provide a way for end users of your application to create content that can be changed at runtime with simple but powerful tags.\n\n\nWhen the parser is installed server-side, users can include tags that follow the \n{name:args}\n format in their input. At runtime, when user input is passed through the parser, these tags get replaced with their computed values. This means that the input becomes far more dynamic and customisable.\n\n\n\n\nWhat is JagTag?\n\u00b6\n\n\nJagTag\n is a text parsing language and specification, created and administered by John Grosh (\n@jagrosh\n). In his own words, JagTag is a \"simple, yet powerful and customisable interpreted text parsing language\". The notation was originally created for use in the Discord bot \nSpectra\n by the same author.\n\n\nWhat is JagTag-JS?\n\u00b6\n\n\nJagTag-JS is a JavaScript implementation of the JagTag notation. On the surface, the interface works in broadly similar ways to that of the original and most of the syntax is one-to-one compatible.\n\n\nHowever, under the hood, the two implementations work in distinctly different ways. This is mostly due to language-level limitations but also from a desire to create readable and reusable code. This does introduce some additional considerations for developers, which are explained in laborious detail in the \ndeveloper docs\n.\n\n\nCredits\n\u00b6\n\n\nThe JagTag notation and technology\n \u00a9 2016-present \nJohn Grosh\n.\n\n\nJagTag-JS\n \u00a9 2018 TheSharks. Released under the GNU GPL license version 3.\n\n\nJagTag-JS is a \nTheSharks\n project developed and maintained by individual organisation members.",
            "title": "Home"
        },
        {
            "location": "/#the-jagtag-js-docs",
            "text": "Welcome to the documentation for JagTag-JS! On this site you can find information about JagTag-JS, aimed to give both end users and developers comprehensive information about the language, the library and the implementation of JagTag.  If you wish to cut to the chase, select the  Developers  or  Users  section from the menu on the left.  Otherwise, feel free to keep on reading!",
            "title": "The JagTag-JS Docs"
        },
        {
            "location": "/#introduction",
            "text": "JagTag (And by the same token JagTag-JS) can be used to provide a way for end users of your application to create content that can be changed at runtime with simple but powerful tags.  When the parser is installed server-side, users can include tags that follow the  {name:args}  format in their input. At runtime, when user input is passed through the parser, these tags get replaced with their computed values. This means that the input becomes far more dynamic and customisable.",
            "title": "Introduction"
        },
        {
            "location": "/#what-is-jagtag",
            "text": "JagTag  is a text parsing language and specification, created and administered by John Grosh ( @jagrosh ). In his own words, JagTag is a \"simple, yet powerful and customisable interpreted text parsing language\". The notation was originally created for use in the Discord bot  Spectra  by the same author.",
            "title": "What is JagTag?"
        },
        {
            "location": "/#what-is-jagtag-js",
            "text": "JagTag-JS is a JavaScript implementation of the JagTag notation. On the surface, the interface works in broadly similar ways to that of the original and most of the syntax is one-to-one compatible.  However, under the hood, the two implementations work in distinctly different ways. This is mostly due to language-level limitations but also from a desire to create readable and reusable code. This does introduce some additional considerations for developers, which are explained in laborious detail in the  developer docs .",
            "title": "What is JagTag-JS?"
        },
        {
            "location": "/#credits",
            "text": "The JagTag notation and technology  \u00a9 2016-present  John Grosh .  JagTag-JS  \u00a9 2018 TheSharks. Released under the GNU GPL license version 3.  JagTag-JS is a  TheSharks  project developed and maintained by individual organisation members.",
            "title": "Credits"
        },
        {
            "location": "/developers/intro/",
            "text": "Developer documentation\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nWelcome to the developer section of the JagTag-JS documentation! The guides in this section are targeted towards those who are integrating the JagTag-JS library into their applications. Here you will find guides, tips and gotchas for implementing the library in a safe and well functioning manner.\n\n\nInstallation and usage\n\u00b6\n\n\nJagTag-JS is available on NPM. Simply install it with \nnpm i @thesharks/jagtag-js\n.\n\n\nIntegrating JagTag-JS into your code is also very straight-forward. Require the module, pass a string through it, and witness the magic happen.\n\n\nconst\n \nJagTagParser\n \n=\n \nrequire\n(\n'@thesharks/jagtag-js'\n)\n\n\n\nJagTagParser\n(\n'change {upper:this} to uppercase'\n)\n \n// Returns 'change THIS to uppercase'\n\n\n\n\n\n\nNote that this barebones example does not include the often times necessary arguments passed to the parser. Those are detailed on the \nAPI page\n.\n\n\nDiscord library support\n\u00b6\n\n\nCurrently, JagTag-JS only supports \nEris\n in Discord-related tags. There are plans to perform compatibility checks and with other popular JavaScript libraries for Discord later down the line, but currently only Eris has verified support.\n\n\nThis section will be expanded when more information is available.\n\n\n\n\nWarning\n\n\nYou may attempt to use other Discord libraries such as discord.js or discordie with this library, but until a compatibility assessment is made, there are no guarantees about functionality.",
            "title": "Introduction"
        },
        {
            "location": "/developers/intro/#developer-documentation",
            "text": "",
            "title": "Developer documentation"
        },
        {
            "location": "/developers/intro/#introduction",
            "text": "Welcome to the developer section of the JagTag-JS documentation! The guides in this section are targeted towards those who are integrating the JagTag-JS library into their applications. Here you will find guides, tips and gotchas for implementing the library in a safe and well functioning manner.",
            "title": "Introduction"
        },
        {
            "location": "/developers/intro/#installation-and-usage",
            "text": "JagTag-JS is available on NPM. Simply install it with  npm i @thesharks/jagtag-js .  Integrating JagTag-JS into your code is also very straight-forward. Require the module, pass a string through it, and witness the magic happen.  const   JagTagParser   =   require ( '@thesharks/jagtag-js' )  JagTagParser ( 'change {upper:this} to uppercase' )   // Returns 'change THIS to uppercase'   Note that this barebones example does not include the often times necessary arguments passed to the parser. Those are detailed on the  API page .",
            "title": "Installation and usage"
        },
        {
            "location": "/developers/intro/#discord-library-support",
            "text": "Currently, JagTag-JS only supports  Eris  in Discord-related tags. There are plans to perform compatibility checks and with other popular JavaScript libraries for Discord later down the line, but currently only Eris has verified support.  This section will be expanded when more information is available.   Warning  You may attempt to use other Discord libraries such as discord.js or discordie with this library, but until a compatibility assessment is made, there are no guarantees about functionality.",
            "title": "Discord library support"
        },
        {
            "location": "/developers/api/",
            "text": "API reference\n\u00b6\n\n\nThis page contains the API reference for JagTag-JS.\n\n\n\n\n\nJagTagParser (string<\nString\n>, args<\nObject\n>)\n\u00b6\n\n\nMain parser function. Takes a string and an \nargs\n object, which will be parsed and the output will be returned.\n\n\nEdge cases\nIf no string is passed to the parser, \nundefined\n will be returned.\nIf there is an unclosed tag within a string, no tags will be parsed in the string until the issue is corrected (String is returned unchanged).\nIf there are no tags within a string, the string is returned unchanged.\n\n\nA note about the callback parameter\n\n\nThose who have browsed the source code may have noticed that the parser function also takes a callback parameter. \nDo not define it unless you willingly want the parser to go haywire.\n It is used internally to track tag nesting and parse them appropriately; it's not meant to be used by anyone else. Treat it as private.\n\n\n\n\nargs\n\u00b6\n\n\nThe \nargs\n object is required to be passed along to most parsers. It's good practice to pass \nargs\n object along with every parser call.\n\n\nObject property reference\n\u00b6\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\nUsed by\n\n\nOptional?\n\n\n\n\n\n\n\n\n\n\ndisabledParsers\n\n\nParser groups to disable from use.\n\n\nArray\n<\nString\n>\n\n\nParser\n\n\nYes\n\n\n\n\n\n\nenableLogging\n\n\nEnable logging of exceptions in method calls. If not set, no logging output will be provided.\n\n\nBoolean\n\n\nParser\n\n\nYes\n\n\n\n\n\n\ntagArgs\n\n\nAdditional arguments to pass to certain tags.\n\n\nArray\n<\nString\n>\n\n\nArgs\n\n\nYes\n\n\n\n\n\n\nid\n\n\nThe ID of the message the tag is in (\nMessage\n.id).\n\n\nString\n\n\nVariables\n\n\nNo\n\n\n\n\n\n\nauthor\n\n\nTag author object (\nMessage\n).\n\n\nMember\n\n\nDiscord\n\n\nNo*\n\n\n\n\n\n\nchannel\n\n\nThe current channel (\nTextChannel\n).\n\n\nTextChannel\n\n\nDiscord\n\n\nNo*\n\n\n\n\n\n\nguild\n\n\nThe current guild (\nMessage\n.guild).\n\n\nGuild\n\n\nDiscord\n\n\nNo*\n\n\n\n\n\n\nchannels\n\n\nArray of all channels in the current guild. (Message.guild.channels).\n\n\nArray\n<\nGuild\n>\n\n\nDiscord\n\n\nNo*\n\n\n\n\n\n\nmembers\n\n\nArray of all members in the current guild (Message.guild.members).\n\n\nArray\n<\nMember\n>\n\n\nDiscord\n\n\nNo*\n\n\n\n\n\n\n\n\n*: If the Discord parser is enabled, these properties must be passed to the parser.\n\n\n\n\nTip\n\n\nIf you don't need certain parser groups, you can disable them with by setting the disabledParsers option in the arguments. The parser groups that can be disabled are \nargs\n, \ndiscord\n, \nfunctional\n, \nstrings\n, \ntime\n and \nvariables\n.\n\n\n\n\nExample:\n\n\nJagTagParser\n(\n'string with {upper:tags}'\n,\n \n{\n\n  \ntagArgs\n:\n \n[\n'arg1'\n,\n \n'arg2'\n],\n\n  \ndisabledParsers\n:\n \n[\n \n'time'\n,\n \n'variables'\n \n]\n\n  \nauthor\n:\n \nerisAuthorObject\n,\n\n  \nchannel\n:\n \nerisChannelObject\n,\n\n  \nguild\n:\n \nerisGuildObject\n,\n\n  \nchannels\n:\n \nerisChannelsArray\n,\n\n  \nmembers\n:\n \nerisMembersArray\n\n\n})",
            "title": "API"
        },
        {
            "location": "/developers/api/#api-reference",
            "text": "This page contains the API reference for JagTag-JS.",
            "title": "API reference"
        },
        {
            "location": "/developers/api/#jagtagparser-stringstring62-argsobject62",
            "text": "Main parser function. Takes a string and an  args  object, which will be parsed and the output will be returned.  Edge cases If no string is passed to the parser,  undefined  will be returned. If there is an unclosed tag within a string, no tags will be parsed in the string until the issue is corrected (String is returned unchanged). If there are no tags within a string, the string is returned unchanged.  A note about the callback parameter  Those who have browsed the source code may have noticed that the parser function also takes a callback parameter.  Do not define it unless you willingly want the parser to go haywire.  It is used internally to track tag nesting and parse them appropriately; it's not meant to be used by anyone else. Treat it as private.",
            "title": "JagTagParser (string&lt;String>, args&lt;Object>)"
        },
        {
            "location": "/developers/api/#args",
            "text": "The  args  object is required to be passed along to most parsers. It's good practice to pass  args  object along with every parser call.",
            "title": "args"
        },
        {
            "location": "/developers/api/#object-property-reference",
            "text": "Property  Description  Type  Used by  Optional?      disabledParsers  Parser groups to disable from use.  Array < String >  Parser  Yes    enableLogging  Enable logging of exceptions in method calls. If not set, no logging output will be provided.  Boolean  Parser  Yes    tagArgs  Additional arguments to pass to certain tags.  Array < String >  Args  Yes    id  The ID of the message the tag is in ( Message .id).  String  Variables  No    author  Tag author object ( Message ).  Member  Discord  No*    channel  The current channel ( TextChannel ).  TextChannel  Discord  No*    guild  The current guild ( Message .guild).  Guild  Discord  No*    channels  Array of all channels in the current guild. (Message.guild.channels).  Array < Guild >  Discord  No*    members  Array of all members in the current guild (Message.guild.members).  Array < Member >  Discord  No*     *: If the Discord parser is enabled, these properties must be passed to the parser.   Tip  If you don't need certain parser groups, you can disable them with by setting the disabledParsers option in the arguments. The parser groups that can be disabled are  args ,  discord ,  functional ,  strings ,  time  and  variables .   Example:  JagTagParser ( 'string with {upper:tags}' ,   { \n   tagArgs :   [ 'arg1' ,   'arg2' ], \n   disabledParsers :   [   'time' ,   'variables'   ] \n   author :   erisAuthorObject , \n   channel :   erisChannelObject , \n   guild :   erisGuildObject , \n   channels :   erisChannelsArray , \n   members :   erisMembersArray  })",
            "title": "Object property reference"
        },
        {
            "location": "/developers/performance/",
            "text": "Perfomance considerations\n\u00b6\n\n\nJagTag-JS is built to work as efficiently as possible while maintaining minimal dependency size. As such, JagTag-JS does not incoporate performance optimising modules or replacements for native methods that are allegedly more performant.\n\n\nNaturally, performance has been considered during development. However, due to developer convenience and language limitations, some concepts sacrifice performance for understandability. This document intends to alleviate your performance concerns if any.\n\n\nSynchronous API\n\u00b6\n\n\nYou may ask yourself why the API of JagTag-JS is synchronous. Won't this lead to thread blocking issues?\n\n\nThe answer is: \nNo.\n No material ones. JagTag-JS only performs very primitive JavaScript operations such as processing strings, which does not incur large performance hits in the first place.\n\n\nAs such, the common execution time for a single tag (In an isolated environment) is \n<= 2 milliseconds\n. This number does not change notably until very high amounts of tags are present in a single string. The number does also not change notably when nesting tags. So there is no real need to worry about performance.\n\n\nTag quantities\n\u00b6\n\n\nWhile JagTag-JS can theoretically support infinite amounts of tags and parsing is normally very fast, parsing speed is still adversely proportional to the amount of tags. As such, and also for good measure, it may be a wise idea to limit the number of tags that can be parsed at once to a sensible number. For instance \nSpectra\n caps out at 200 tags.\n\n\nThis module uses the \nmatchRecursive\n plugin from \nXRegExp\n for properly detecting tag boundaries even when they are nested. It's recommended to use it to gather data on how many tags are in a single string and throttling the amounts appropriately.\n\n\nNested tags\n\u00b6\n\n\nIn order to support nested tags, JagTag-JS draws inspiration from the \nPEMDAS\n principle in arithmetics. In practice, this means that tags are parsed from the deepest level upwards.\n\n\nConsider for instance the \n{upper:{lower:{upper:test}}}\n tag. The result of the first tag will depend on the next, the result of which will depend on the one after that. This pattern can theoretically\n1\n continue ad infinitum.\n\n\nDue to this, upon parsing a tag, JagTag-JS will look for nested tags and recursively run the parser until it finds a point where there are no further tags. It will leave previous parse operations waiting until the scan is complete and the deepest level has been found.\n\n\nAt this point, the parser will proceed to parsing the tags one by one from the deepest level and going up from there until it reaches the root tag. Now the parsed tag can be returned and the parser can proceed to the next tag.\n\n\nThis does not incur a materially higher performance hit compared to multiple one-level tags in a single string. While the statements outlined in the first section hold true, it may still be a wise idea to limit the amount of tags that can be nested for good measure.\n\n\n\n\n\n\n\n\n\n\nSee \nTag quantities\n.\u00a0\n\u21a9",
            "title": "Performance"
        },
        {
            "location": "/developers/performance/#perfomance-considerations",
            "text": "JagTag-JS is built to work as efficiently as possible while maintaining minimal dependency size. As such, JagTag-JS does not incoporate performance optimising modules or replacements for native methods that are allegedly more performant.  Naturally, performance has been considered during development. However, due to developer convenience and language limitations, some concepts sacrifice performance for understandability. This document intends to alleviate your performance concerns if any.",
            "title": "Perfomance considerations"
        },
        {
            "location": "/developers/performance/#synchronous-api",
            "text": "You may ask yourself why the API of JagTag-JS is synchronous. Won't this lead to thread blocking issues?  The answer is:  No.  No material ones. JagTag-JS only performs very primitive JavaScript operations such as processing strings, which does not incur large performance hits in the first place.  As such, the common execution time for a single tag (In an isolated environment) is  <= 2 milliseconds . This number does not change notably until very high amounts of tags are present in a single string. The number does also not change notably when nesting tags. So there is no real need to worry about performance.",
            "title": "Synchronous API"
        },
        {
            "location": "/developers/performance/#tag-quantities",
            "text": "While JagTag-JS can theoretically support infinite amounts of tags and parsing is normally very fast, parsing speed is still adversely proportional to the amount of tags. As such, and also for good measure, it may be a wise idea to limit the number of tags that can be parsed at once to a sensible number. For instance  Spectra  caps out at 200 tags.  This module uses the  matchRecursive  plugin from  XRegExp  for properly detecting tag boundaries even when they are nested. It's recommended to use it to gather data on how many tags are in a single string and throttling the amounts appropriately.",
            "title": "Tag quantities"
        },
        {
            "location": "/developers/performance/#nested-tags",
            "text": "In order to support nested tags, JagTag-JS draws inspiration from the  PEMDAS  principle in arithmetics. In practice, this means that tags are parsed from the deepest level upwards.  Consider for instance the  {upper:{lower:{upper:test}}}  tag. The result of the first tag will depend on the next, the result of which will depend on the one after that. This pattern can theoretically 1  continue ad infinitum.  Due to this, upon parsing a tag, JagTag-JS will look for nested tags and recursively run the parser until it finds a point where there are no further tags. It will leave previous parse operations waiting until the scan is complete and the deepest level has been found.  At this point, the parser will proceed to parsing the tags one by one from the deepest level and going up from there until it reaches the root tag. Now the parsed tag can be returned and the parser can proceed to the next tag.  This does not incur a materially higher performance hit compared to multiple one-level tags in a single string. While the statements outlined in the first section hold true, it may still be a wise idea to limit the amount of tags that can be nested for good measure.      See  Tag quantities .\u00a0 \u21a9",
            "title": "Nested tags"
        },
        {
            "location": "/users/intro/",
            "text": "End user documentation\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nWelcome to the end user section of the JagTag-JS documentation! Here you can find information on available methods, differences from the original and other information relevant to you as an end user.\n\n\nFor those coming from the Java version\n\u00b6\n\n\nIf you have used the original Java version of JagTag before (For instance in conjunction with \nSpectra\n, it's worth nothing that there are a few key differences when it comes to the implementation of JagTag in JavaScript.\n\n\nCross-compatibility\n\u00b6\n\n\nSome methods are not 1-to-1 compatible between versions. What this means is that JagTag syntax considered valid in Java JagTag may not be fully copy-pasteable in this implementation. These cases are fortunately few and far between, as most of the differences can be found under the hood, but they exist. More details can be found in the \nmethod reference\n.\n\n\nKeyword changes\n\u00b6\n\n\nJagTag-JS does not use keywords in tag arguments to simplify the operation of parsing tags and reduce the amount of necessary hardcoding. Methods like \nif\n may differ somewhat from the original implementation.\n\n\nMore information in the \nmethod reference\n.",
            "title": "Introduction"
        },
        {
            "location": "/users/intro/#end-user-documentation",
            "text": "",
            "title": "End user documentation"
        },
        {
            "location": "/users/intro/#introduction",
            "text": "Welcome to the end user section of the JagTag-JS documentation! Here you can find information on available methods, differences from the original and other information relevant to you as an end user.",
            "title": "Introduction"
        },
        {
            "location": "/users/intro/#for-those-coming-from-the-java-version",
            "text": "If you have used the original Java version of JagTag before (For instance in conjunction with  Spectra , it's worth nothing that there are a few key differences when it comes to the implementation of JagTag in JavaScript.",
            "title": "For those coming from the Java version"
        },
        {
            "location": "/users/intro/#cross-compatibility",
            "text": "Some methods are not 1-to-1 compatible between versions. What this means is that JagTag syntax considered valid in Java JagTag may not be fully copy-pasteable in this implementation. These cases are fortunately few and far between, as most of the differences can be found under the hood, but they exist. More details can be found in the  method reference .",
            "title": "Cross-compatibility"
        },
        {
            "location": "/users/intro/#keyword-changes",
            "text": "JagTag-JS does not use keywords in tag arguments to simplify the operation of parsing tags and reduce the amount of necessary hardcoding. Methods like  if  may differ somewhat from the original implementation.  More information in the  method reference .",
            "title": "Keyword changes"
        },
        {
            "location": "/users/methods/home/",
            "text": "Method reference\n\u00b6\n\n\nThis is the method reference for JagTag-JS. While most of this information is regurgitated from the original documentation, there are some key changes. Methods that differ from the original are marked with \nyellow markers\n.\n\n\nYou can select a method category from the menu on the left or click on one of the links below.\n\n\n\n\nDiscord\n\n\nArguments\n\n\nFunctional\n\n\nStrings\n\n\nTime\n\n\nVariables\n\n\n\n\n\n\nNote\n\n\nThe examples in this documentation assume that the usage context for the module is a \nDiscord\n bot. JagTag-JS may be implemented for other purposes as well, but this documentation does not explore or account for that aspect.",
            "title": "Home"
        },
        {
            "location": "/users/methods/home/#method-reference",
            "text": "This is the method reference for JagTag-JS. While most of this information is regurgitated from the original documentation, there are some key changes. Methods that differ from the original are marked with  yellow markers .  You can select a method category from the menu on the left or click on one of the links below.   Discord  Arguments  Functional  Strings  Time  Variables    Note  The examples in this documentation assume that the usage context for the module is a  Discord  bot. JagTag-JS may be implemented for other purposes as well, but this documentation does not explore or account for that aspect.",
            "title": "Method reference"
        },
        {
            "location": "/users/methods/discord/",
            "text": "Discord method reference\n\u00b6\n\n\nThese methods return names and other properties of Discord entities like channels and users. Throughout this section, the word \"current\" refers to the context the command was ran in (Guild, channel etc.).\n\n\n\n\nA note about search precision\n\n\nThe search methods use the \nLevenshtein distance\n algorithm to find the closest possible match to the supplied search query. \nThe longer the desired username is, the closer the search query will have to be to the real thing.\n This is purely due to how the Levenshtein algorithm works.\n\n\nThe search methods are also server-specific, meaning that you can't find results from servers outside the current one.\n\n\n\n\n{user}\n - Returns the username of the user that ran the tag.\n\n\n{user:SEARCH_USERNAME}\n - Returns a user's name.\n\n\n\n\nJagTag:\n My username is \n{user}\n and I can search for \n{user:doug}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My username is LWTech and I can search for Dougley\n\n\n\n\n{nick}\n - Returns the nickname of the user that ran the tag.\n\n\n{nick:SEARCH_USERNAME}\n - Returns a user's nickname.\n\n\n\n\nJagTag:\n My nickname is \n{nick}\n and Dougley's is \n{nick:doug}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My nickname is Bollocks and Dougley's is Dino\n\n\n\n\n{discrim}\n - Returns the 4-digit discriminator of the user that ran the tag.\n\n\n{user:SEARCH_USERNAME}\n - Returns a user's discriminator.\n\n\n\n\nJagTag:\n My discriminator is \n{discrim}\n and James Bond's is \n{discrim:james}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My discriminator is 0005 and James Bond's is 0007\n\n\n\n\n{avatar}\n - Returns the avatar URL of the user that ran the tag.\n\n\n{nick:SEARCH_USERNAME}\n - Returns a user's avatar URL.\n\n\n\n\nJagTag:\n My avatar URL is \n{avatar}\n and Dougley's is \n{avatar:doug}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My avatar URL is \nhttps://cdn.discordapp.com/avatars/152664793587777537/a_9fac7b06c5256cc37f059afe93294d28.gif?size=128\n and Dougley's is \nhttps://cdn.discordapp.com/avatars/107904023901777920/89a6b0e49c7d56d386c3d7f562718c61.jpg?size=128\n'\n\n\n\n\n{creation:SNOWFLAKE}\n - Gets the creation time of a Discord ID. Must be a valid ID.\n\n\n\n\nJagTag:\n My account was created at \n{creation:152664793587777537}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My account was created at Fri Feb 26 2016 06:35:23 GMT+0000\n\n\n\n\n{userid}\n - Gets the user ID of the user that ran the tag.\n\n\n\n\nJagTag:\n My ID is \n{userid}\n\n\nCommand:\n ++tag example\n\n\nResult:\n My ID is 152664793587777537\n\n\n\n\n{atuser}\n - Returns a ping of the user that ran the tag.\n\n\n\n\nJagTag:\n I can ping myself with \n{atuser}\n\n\nCommand:\n ++tag example\n\n\nResult:\n I can ping myself with @LWTech\n\n\n\n\n{server}\n - Returns the name of the current server.\n\n\n\n\nJagTag:\n Welcome to \n{server}\n\n\nCommand:\n ++tag example\n\n\nResult:\n Welcome to WildBot's Territory\n\n\n\n\n{serverid}\n - Returns the ID of the current server.\n\n\n\n\nJagTag:\n The ID of this server is \n{serverid}\n\n\nCommand:\n ++tag example\n\n\nResult:\n The ID of this server is 110462143152803840\n\n\n\n\n{servercount}\n - Returns the member count of the current server.\n\n\n\n\nJagTag:\n This server has \n{servercount}\n members\n\n\nCommand:\n ++tag example\n\n\nResult:\n This server has 5221 members\n\n\n\n\n{servericon}\n - Returns the icon URL of the current server.\n\n\n\n\nJagTag:\n The icon of this server is \n{servericon}\n\n\nCommand:\n ++tag example\n\n\nResult:\n The icon of this server is \nhttps://cdn.discordapp.com/icons/110462143152803840/9d2d4dfaf7fc0e8e74045647964d74e8.jpg?size=128\n\n\n\n\n{channel}\n - Returns the name of the current channel.\n\n\n\n\nJagTag:\n This channel's name is #\n{channel}\n\n\nCommand:\n ++tag example\n\n\nResult:\n This channel's name is #private-sandbox\n\n\n\n\n{channelid}\n - Returns the ID of the current channel.\n\n\n\n\nJagTag:\n This channel's ID is \n{channelid}\n\n\nCommand:\n ++tag example\n\n\nResult:\n This channel's name is 221387075021307904\n\n\n\n\n{randuser}\n - Returns the name of a random user in the current server.\n\n\n\n\nJagTag:\n Go talk to \n{randuser}\n\n\nCommand:\n ++tag example\n\n\nResult:\n Go talk to Zaza\n\n\n\n\n{randonline}\n - Returns the name of a random online user in the current server.\n\n\n\n\nJagTag:\n Go talk to \n{randuser}\n\n\nCommand:\n ++tag example\n\n\nResult:\n Go talk to Nenkai\n\n\n\n\n{randchannel}\n - Returns the name of a random channel in the current server.\n\n\n\n\nJagTag:\n Go to \n{randchannel}\n\n\nCommand:\n ++tag example\n\n\nResult:\n Go to #faq",
            "title": "Discord"
        },
        {
            "location": "/users/methods/discord/#discord-method-reference",
            "text": "These methods return names and other properties of Discord entities like channels and users. Throughout this section, the word \"current\" refers to the context the command was ran in (Guild, channel etc.).   A note about search precision  The search methods use the  Levenshtein distance  algorithm to find the closest possible match to the supplied search query.  The longer the desired username is, the closer the search query will have to be to the real thing.  This is purely due to how the Levenshtein algorithm works.  The search methods are also server-specific, meaning that you can't find results from servers outside the current one.   {user}  - Returns the username of the user that ran the tag.  {user:SEARCH_USERNAME}  - Returns a user's name.   JagTag:  My username is  {user}  and I can search for  {user:doug}  Command:  ++tag example  Result:  My username is LWTech and I can search for Dougley   {nick}  - Returns the nickname of the user that ran the tag.  {nick:SEARCH_USERNAME}  - Returns a user's nickname.   JagTag:  My nickname is  {nick}  and Dougley's is  {nick:doug}  Command:  ++tag example  Result:  My nickname is Bollocks and Dougley's is Dino   {discrim}  - Returns the 4-digit discriminator of the user that ran the tag.  {user:SEARCH_USERNAME}  - Returns a user's discriminator.   JagTag:  My discriminator is  {discrim}  and James Bond's is  {discrim:james}  Command:  ++tag example  Result:  My discriminator is 0005 and James Bond's is 0007   {avatar}  - Returns the avatar URL of the user that ran the tag.  {nick:SEARCH_USERNAME}  - Returns a user's avatar URL.   JagTag:  My avatar URL is  {avatar}  and Dougley's is  {avatar:doug}  Command:  ++tag example  Result:  My avatar URL is  https://cdn.discordapp.com/avatars/152664793587777537/a_9fac7b06c5256cc37f059afe93294d28.gif?size=128  and Dougley's is  https://cdn.discordapp.com/avatars/107904023901777920/89a6b0e49c7d56d386c3d7f562718c61.jpg?size=128 '   {creation:SNOWFLAKE}  - Gets the creation time of a Discord ID. Must be a valid ID.   JagTag:  My account was created at  {creation:152664793587777537}  Command:  ++tag example  Result:  My account was created at Fri Feb 26 2016 06:35:23 GMT+0000   {userid}  - Gets the user ID of the user that ran the tag.   JagTag:  My ID is  {userid}  Command:  ++tag example  Result:  My ID is 152664793587777537   {atuser}  - Returns a ping of the user that ran the tag.   JagTag:  I can ping myself with  {atuser}  Command:  ++tag example  Result:  I can ping myself with @LWTech   {server}  - Returns the name of the current server.   JagTag:  Welcome to  {server}  Command:  ++tag example  Result:  Welcome to WildBot's Territory   {serverid}  - Returns the ID of the current server.   JagTag:  The ID of this server is  {serverid}  Command:  ++tag example  Result:  The ID of this server is 110462143152803840   {servercount}  - Returns the member count of the current server.   JagTag:  This server has  {servercount}  members  Command:  ++tag example  Result:  This server has 5221 members   {servericon}  - Returns the icon URL of the current server.   JagTag:  The icon of this server is  {servericon}  Command:  ++tag example  Result:  The icon of this server is  https://cdn.discordapp.com/icons/110462143152803840/9d2d4dfaf7fc0e8e74045647964d74e8.jpg?size=128   {channel}  - Returns the name of the current channel.   JagTag:  This channel's name is # {channel}  Command:  ++tag example  Result:  This channel's name is #private-sandbox   {channelid}  - Returns the ID of the current channel.   JagTag:  This channel's ID is  {channelid}  Command:  ++tag example  Result:  This channel's name is 221387075021307904   {randuser}  - Returns the name of a random user in the current server.   JagTag:  Go talk to  {randuser}  Command:  ++tag example  Result:  Go talk to Zaza   {randonline}  - Returns the name of a random online user in the current server.   JagTag:  Go talk to  {randuser}  Command:  ++tag example  Result:  Go talk to Nenkai   {randchannel}  - Returns the name of a random channel in the current server.   JagTag:  Go to  {randchannel}  Command:  ++tag example  Result:  Go to #faq",
            "title": "Discord method reference"
        },
        {
            "location": "/users/methods/arguments/",
            "text": "Argument method reference\n\u00b6\n\n\nThese methods deal with arguments that are passed to the parser at runtime. The method of supplying these arguments may vary depending on the implementation.\n\n\n\n\nA note about example accuracy\n\n\nThe examples you see here assume a certain command format, namely that used by \nWildBeast\n. The way of passing the arguments may heavily differ from these examples depending on the implementation of this module. Consult the developer of the application you're using for information on how this works in their specific implementation.\n\n\n\n\n{args}\n - Returns a list of arguments passed to the parser.\n\n\n\n\nJagTag:\n The arguments passed to this tag are \n{args}\n\n\nCommand:\n ++tag example these are the args\n\n\nResult:\n The arguments passed to this tag are these, are, the, args\n\n\n\n\n{argslen}\n - Returns the length of the list of arguments passed to the parser.\n\n\n\n\nJagTag:\n \n{args}\n arguments were passed to this tag\n\n\nCommand:\n ++tag example these are the args\n\n\nResult:\n 4 arguments were passed to this tag\n\n\n\n\n{arg:NUM}\n - Returns a specific argument from the list of arguments passed to the parser.\n\n\n\n\nIndexing pitfall\n\n\nThe \nNUM\n parameter corresponds to an index in a list (First, second, etc.). In programming languages, there is a zeroth index, which results in \nthe first item being at the zeroth index\n.\n\n\n\n\n\n\nJagTag:\n The first argument is \n{arg:0}\n and the second is \n{arg:1}\n\n\nCommand:\n ++tag example bananas apples oranges\n\n\nResult:\n The first argument is bananas and the second is apples",
            "title": "Arguments"
        },
        {
            "location": "/users/methods/arguments/#argument-method-reference",
            "text": "These methods deal with arguments that are passed to the parser at runtime. The method of supplying these arguments may vary depending on the implementation.   A note about example accuracy  The examples you see here assume a certain command format, namely that used by  WildBeast . The way of passing the arguments may heavily differ from these examples depending on the implementation of this module. Consult the developer of the application you're using for information on how this works in their specific implementation.   {args}  - Returns a list of arguments passed to the parser.   JagTag:  The arguments passed to this tag are  {args}  Command:  ++tag example these are the args  Result:  The arguments passed to this tag are these, are, the, args   {argslen}  - Returns the length of the list of arguments passed to the parser.   JagTag:   {args}  arguments were passed to this tag  Command:  ++tag example these are the args  Result:  4 arguments were passed to this tag   {arg:NUM}  - Returns a specific argument from the list of arguments passed to the parser.   Indexing pitfall  The  NUM  parameter corresponds to an index in a list (First, second, etc.). In programming languages, there is a zeroth index, which results in  the first item being at the zeroth index .    JagTag:  The first argument is  {arg:0}  and the second is  {arg:1}  Command:  ++tag example bananas apples oranges  Result:  The first argument is bananas and the second is apples",
            "title": "Argument method reference"
        },
        {
            "location": "/users/methods/functional/",
            "text": "Functional method reference\n\u00b6\n\n\nThese methods are centered around logic, mathematics and random numbers.\n\n\n\n\nIncompatibility warning\n\n\nSome of these methods differ slightly from the original implementation. They are marked with \nyellow markers\n.\n\n\n\n\n{note:TEXT}\n - Allows you to leave a note in a tag that gets removed at runtime.\n\n\n\n\nJagTag:\n \n{note:Cool beans}\n This is a tag\n\n\nCommand:\n ++tag example\n\n\nResult:\n This is a tag\n\n\n\n\n{choose:OPTION1|OPTION2|OPTION3|(...)}\n - Chooses a random item from a list. The options can theoretically continue ad infinitum.\n\n\n\n\nJagTag:\n \n{choose:apples|bananas|pears}\n\n\nCommand:\n ++tag example\n\n\nResult:\n apples (Will change on each run)\n\n\n\n\n{range:START|END}\n - Chooses a number from the provided range.\n\n\n\n\nJagTag:\n \n{range:0|10}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 7 (Will change on each run)\n\n\n\n\n{if:SOMETHING|COMPARATOR|SOMETHING|THEN|ELSE}\n1\n - Executes a comparison between two things. Standard \nJavaScript comparison operators\n can be used for the \nCOMPARATOR\n property. Supplying \n?\n as a comparator will compare the two parts by regex.\n\n\n\n\nJagTag:\n \n{str|===|str|str is equal to str|str is not equal to str}\n\n\nCommand:\n ++tag example\n\n\nResult:\n str is equal to str\n\n\n\n\n{math:EXPRESSION}\n2\n - Executes and returns the result of a mathematical expression.\n\n\n\n\nJagTag:\n \n{math:(2 + 2) * 3 / 4}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 3\n\n\n\n\n{abs:NUMBER}\n - Returns the absolute value of a number.\n\n\n\n\nJagTag:\n \n{abs:-4}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 4\n\n\n\n\n{floor:NUMBER}\n - Rounds a number down.\n\n\n\n\nJagTag:\n \n{floor:5.8}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 6\n\n\n\n\n{ceil:NUMBER}\n - Rounds a number up.\n\n\n\n\nJagTag:\n \n{floor:3.2}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 4\n\n\n\n\n{sin:NUMBER}\n - Extracts the sine of a radian value.\n\n\n\n\nJagTag:\n \n{sin:1.1}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 0.89120736006\n\n\n\n\n{cos:NUMBER}\n - Extracts the cosine of a radian value.\n\n\n\n\nJagTag:\n \n{cos:1.1}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 0.45359612142\n\n\n\n\n{tan:NUMBER}\n - Extracts the tangent of a radian value.\n\n\n\n\nJagTag:\n \n{tan:1.1}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 1.96475965725\n\n\n\n\n{base:NUMBER|OLD_BASE|NEW_BASE}\n - Converts a number to one base to another (Radix).\n\n\n\n\nJagTag:\n \n{base:4|10|2}\n\n\nCommand:\n ++tag example\n\n\nResult:\n 100\n\n\n\n\n\n\n\n\n\n\n\n\nThere is no need to supply the additional keywords in the arguments, and they will not be parsed either.\n\n\n\n\nJava: \n{if:SOMETHING|COMPARATOR|SOMETHING|then:THEN|else:ELSE}\n\n\nJS: \n{if:SOMETHING|COMPARATOR|SOMETHING|THEN|ELSE}\n\n\n\n\n\u21a9\n\n\n\n\n\n\nA singular expression will suffice, rather than multiple chained ones.\n\n\n\n\nJava: \n{math:NUMBER|EXPRESSION|NUMBER|EXPRESSION|NUMBER|(...)}\n\n\nJS: \n{math:EXPRESSION}\n\n\n\n\n\u21a9",
            "title": "Functional"
        },
        {
            "location": "/users/methods/functional/#functional-method-reference",
            "text": "These methods are centered around logic, mathematics and random numbers.   Incompatibility warning  Some of these methods differ slightly from the original implementation. They are marked with  yellow markers .   {note:TEXT}  - Allows you to leave a note in a tag that gets removed at runtime.   JagTag:   {note:Cool beans}  This is a tag  Command:  ++tag example  Result:  This is a tag   {choose:OPTION1|OPTION2|OPTION3|(...)}  - Chooses a random item from a list. The options can theoretically continue ad infinitum.   JagTag:   {choose:apples|bananas|pears}  Command:  ++tag example  Result:  apples (Will change on each run)   {range:START|END}  - Chooses a number from the provided range.   JagTag:   {range:0|10}  Command:  ++tag example  Result:  7 (Will change on each run)   {if:SOMETHING|COMPARATOR|SOMETHING|THEN|ELSE} 1  - Executes a comparison between two things. Standard  JavaScript comparison operators  can be used for the  COMPARATOR  property. Supplying  ?  as a comparator will compare the two parts by regex.   JagTag:   {str|===|str|str is equal to str|str is not equal to str}  Command:  ++tag example  Result:  str is equal to str   {math:EXPRESSION} 2  - Executes and returns the result of a mathematical expression.   JagTag:   {math:(2 + 2) * 3 / 4}  Command:  ++tag example  Result:  3   {abs:NUMBER}  - Returns the absolute value of a number.   JagTag:   {abs:-4}  Command:  ++tag example  Result:  4   {floor:NUMBER}  - Rounds a number down.   JagTag:   {floor:5.8}  Command:  ++tag example  Result:  6   {ceil:NUMBER}  - Rounds a number up.   JagTag:   {floor:3.2}  Command:  ++tag example  Result:  4   {sin:NUMBER}  - Extracts the sine of a radian value.   JagTag:   {sin:1.1}  Command:  ++tag example  Result:  0.89120736006   {cos:NUMBER}  - Extracts the cosine of a radian value.   JagTag:   {cos:1.1}  Command:  ++tag example  Result:  0.45359612142   {tan:NUMBER}  - Extracts the tangent of a radian value.   JagTag:   {tan:1.1}  Command:  ++tag example  Result:  1.96475965725   {base:NUMBER|OLD_BASE|NEW_BASE}  - Converts a number to one base to another (Radix).   JagTag:   {base:4|10|2}  Command:  ++tag example  Result:  100       There is no need to supply the additional keywords in the arguments, and they will not be parsed either.   Java:  {if:SOMETHING|COMPARATOR|SOMETHING|then:THEN|else:ELSE}  JS:  {if:SOMETHING|COMPARATOR|SOMETHING|THEN|ELSE}   \u21a9    A singular expression will suffice, rather than multiple chained ones.   Java:  {math:NUMBER|EXPRESSION|NUMBER|EXPRESSION|NUMBER|(...)}  JS:  {math:EXPRESSION}   \u21a9",
            "title": "Functional method reference"
        },
        {
            "location": "/users/methods/strings/",
            "text": "String method reference\n\u00b6\n\n\nThese methods allow the manipulation of strings in various ways.\n\n\n\n\nIncompatibility warning\n\n\nSome of these methods differ slightly from the original implementation. They are marked with \nyellow markers\n.\n\n\n\n\n{lower:TEXT}\n - Converts the passed text into lowercase.\n\n\n\n\nJagTag:\n This will be \n{lower:DE-SHOUTED}\n\n\nCommand:\n ++tag example\n\n\nResult:\n This will be de-shouted\n\n\n\n\n{upper:TEXT}\n - Converts the passed text into uppercase.\n\n\n\n\nJagTag:\n This will be \n{upper:shouted}\n\n\nCommand:\n ++tag example\n\n\nResult:\n This will be SHOUTED\n\n\n\n\n{length:TEXT}\n - Returns the length of the passed text.\n\n\n\n\nJagTag:\n The length of \"something\" is \n{length:something}\n\n\nCommand:\n ++tag example\n\n\nResult:\n The length of \"something\" is 9\n\n\n\n\n{url:TEXT}\n - Converts the passed text into UTF-8 enconded URL format.\n\n\n\n\n\n\n\nJagTag:\n http:\u200b//lmgtfy.com/?q=\n{url:Spicy Memes}\n\n\nCommand:\n ++tag example\n\n\nResult:\n \nhttp://lmgtfy.com/?q=Spicy+Memes\n\n\n\n\n{replace:THIS|WITH_THIS|IN_THIS}\n1\n - Replaces a piece of text with another in the passed text. The first argument may be either a substring (Literal matching) or a regex pattern.\n\n\n\n\nJagTag:\n \n{replace:apples|bananas|I like apples}\n\n\nCommand:\n ++tag example\n\n\nResult:\n I like bananas\n\n\n\n\n{substring:START|END|TEXT}\n - Returns a piece from the text between the START and END points. You can use negative numbers to start from the end of the string, rather than the beginning.\n\n\n\n\nIndexing pitfall\n\n\nThe \nSTART\n and \nEND\n parameters correspond to character positions in a string (First, second, etc.). In programming languages, there is a zeroth index, which results in \nthe first character being at the zeroth index\n.\n\n\n\n\n\n\nJagTag:\n \n{substring:2|6|something}\n and \n{substring:-2|4|something}\n\n\nCommand:\n ++tag example\n\n\nResult:\n meth ng\n\n\n\n\n{oneline:TEXT}\n - Removes extraneous whitespace from a piece of text.\n\n\n\n\nJagTag:\n \n{oneline:lots\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0whitespace}\n\n\nCommand:\n ++tag example\n\n\nResult:\n lots of whitespace\n\n\n\n\n{hash:TEXT}\n - Returns the hash code for a piece of text.\n\n\n\n\nJagTag:\n \n{hash:test text}\n\n\nCommand:\n ++tag example\n\n\nResult:\n -1238303749\n\n\n\n\n\n\n\n\n\n\n\n\nThere is no need to supply the additional keywords in the arguments, and they will not be parsed either.\n\n\n\n\nJava: \n{replace:THIS|with:THIS|in:THIS}\n\n\nJS: \n{replace:THIS|WITH_THIS|IN_THIS}\n\n\n\n\nThe \nreplaceregex\n method is also incorporated in this method - it's not a separate method. The regex has to be in JavaScript format. For more information, see \nthis tutorial\n and \nRegex101\n.\u00a0\n\u21a9",
            "title": "Strings"
        },
        {
            "location": "/users/methods/strings/#string-method-reference",
            "text": "These methods allow the manipulation of strings in various ways.   Incompatibility warning  Some of these methods differ slightly from the original implementation. They are marked with  yellow markers .   {lower:TEXT}  - Converts the passed text into lowercase.   JagTag:  This will be  {lower:DE-SHOUTED}  Command:  ++tag example  Result:  This will be de-shouted   {upper:TEXT}  - Converts the passed text into uppercase.   JagTag:  This will be  {upper:shouted}  Command:  ++tag example  Result:  This will be SHOUTED   {length:TEXT}  - Returns the length of the passed text.   JagTag:  The length of \"something\" is  {length:something}  Command:  ++tag example  Result:  The length of \"something\" is 9   {url:TEXT}  - Converts the passed text into UTF-8 enconded URL format.    JagTag:  http:\u200b//lmgtfy.com/?q= {url:Spicy Memes}  Command:  ++tag example  Result:   http://lmgtfy.com/?q=Spicy+Memes   {replace:THIS|WITH_THIS|IN_THIS} 1  - Replaces a piece of text with another in the passed text. The first argument may be either a substring (Literal matching) or a regex pattern.   JagTag:   {replace:apples|bananas|I like apples}  Command:  ++tag example  Result:  I like bananas   {substring:START|END|TEXT}  - Returns a piece from the text between the START and END points. You can use negative numbers to start from the end of the string, rather than the beginning.   Indexing pitfall  The  START  and  END  parameters correspond to character positions in a string (First, second, etc.). In programming languages, there is a zeroth index, which results in  the first character being at the zeroth index .    JagTag:   {substring:2|6|something}  and  {substring:-2|4|something}  Command:  ++tag example  Result:  meth ng   {oneline:TEXT}  - Removes extraneous whitespace from a piece of text.   JagTag:   {oneline:lots\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0whitespace}  Command:  ++tag example  Result:  lots of whitespace   {hash:TEXT}  - Returns the hash code for a piece of text.   JagTag:   {hash:test text}  Command:  ++tag example  Result:  -1238303749       There is no need to supply the additional keywords in the arguments, and they will not be parsed either.   Java:  {replace:THIS|with:THIS|in:THIS}  JS:  {replace:THIS|WITH_THIS|IN_THIS}   The  replaceregex  method is also incorporated in this method - it's not a separate method. The regex has to be in JavaScript format. For more information, see  this tutorial  and  Regex101 .\u00a0 \u21a9",
            "title": "String method reference"
        },
        {
            "location": "/users/methods/time/",
            "text": "Time method reference\n\u00b6\n\n\nThese methods allow for the getting of time and the formatting of time expressions.\n\n\n{now}\n - Returns current UTC time in \nRFC 1123 format\n.\n\n\n{now:FORMAT}\n - Returns current UTC time in the specified format. See \nFormatting\n for the available patterns.\n\n\n\n\nJagTag:\n The time is \n{now}\n and the current date is \n{now:D.MM.YYYY}\n\n\nCommand:\n ++tag example\n\n\nResult:\n The time is {{currenttime}} and the current date is {{currentdate}} \n\n\n\n\n{time:EPOCH_MILLISECONDS|FORMAT}\n - Parses a \nDate.now()\n expression to the provided format. If no format is supplied, the \nRFC 1123 format\n is used. See \nFormatting\n for the available patterns.\n\n\n\n\nJagTag:\n {{now}} formatted to RFC 1123 is \n{time:{{now}}}\n\n\nCommand:\n ++tag example\n\n\nResult:\n {{now}} formatted to RFC 1123 is {{nowrfc}}\n\n\n\n\nFormatting\n\u00b6\n\n\nJagTag-JS utilises \nMoment.js\n for time parsing. Here is a list of available tokens.\n\n\nYear, month and day\n\u00b6\n\n\n\n\n\n\n\n\nInput\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nYYYY\n\n\n2014\n\n\nTwo- or four-digit year.\n\n\n\n\n\n\nYY\n\n\n14\n\n\nTwo-digit year.\n\n\n\n\n\n\nY\n\n\n-25\n\n\nYear with any number of digits and sign.\n\n\n\n\n\n\nQ\n\n\n1 to 4\n\n\nQuarter of year. Sets month to first month in quarter.\n\n\n\n\n\n\nM\n \nMM\n\n\n1 to 12\n\n\nMonth number.\n\n\n\n\n\n\nMMM\n \nMMMM\n\n\nJan to December\n\n\nMonth name in locale.\n\n\n\n\n\n\nD\n \nDD\n\n\n1 to 31\n\n\nDay of month.\n\n\n\n\n\n\nDo\n\n\n1\nst\n to 31\nst\n\n\nDay of month with ordinal.\n\n\n\n\n\n\nDDD\n \nDDDD\n\n\n1 to 365\n\n\nDay of year.\n\n\n\n\n\n\nX\n\n\n1410715640.579\n\n\nUnix timestamp.\n\n\n\n\n\n\nx\n\n\n1410715640579\n\n\nUnix millisecond timestamp.\n\n\n\n\n\n\n\n\nWeek year, week and weekday\n\u00b6\n\n\n\n\n\n\n\n\nInput\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngggg\n\n\n2014\n\n\nLocale four-digit week year.\n\n\n\n\n\n\ngg\n\n\n14\n\n\nLocale two-digit week year.\n\n\n\n\n\n\nw\n \nww\n\n\n1 to 53\n\n\nLocale week of year.\n\n\n\n\n\n\ne\n\n\n0 to 6\n\n\nLocale day of week.\n\n\n\n\n\n\nddd\n \ndddd\n\n\nMon to Sunday\n\n\nDay name in locale.\n\n\n\n\n\n\nGGGG\n\n\n2014\n\n\nISO four-digit week year.\n\n\n\n\n\n\nGG\n\n\n14\n\n\nISO two-digit week year.\n\n\n\n\n\n\nW\n \nWW\n\n\n1 to 53\n\n\nISO week of year.\n\n\n\n\n\n\nE\n\n\n1 to 7\n\n\nISO day of week.\n\n\n\n\n\n\n\n\nHour, minute, second, millisecond and time offset\n\u00b6\n\n\n\n\n\n\n\n\nInput\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nH\n \nHH\n\n\n0 to 23\n\n\nHours (24 hour time).\n\n\n\n\n\n\nh\n \nhh\n\n\n1 to 12\n\n\nHours (12 hour time used with \na\n \nA\n).\n\n\n\n\n\n\nk\n \nkk\n\n\n1 to 24\n\n\nHours (24 hour time from 1 to 24).\n\n\n\n\n\n\na\n \nA\n\n\nam pm\n\n\nPost or ante meridiem (Note that the single \"a\" and \"p\" characters are also considered valid).\n\n\n\n\n\n\nm\n \nmm\n\n\n0 to 59\n\n\nMinutes.\n\n\n\n\n\n\ns\n \nss\n\n\n0 to 59\n\n\nSeconds.\n\n\n\n\n\n\nS\n \nSS\n \nSSS\n\n\n0 to 999\n\n\nFractional seconds.\n\n\n\n\n\n\nZ\n \nZZ\n\n\n+12:00\n\n\nOffset from UTC as \n+-HH:mm\n, \n+-HHmm\n or \nZ\n.",
            "title": "Time"
        },
        {
            "location": "/users/methods/time/#time-method-reference",
            "text": "These methods allow for the getting of time and the formatting of time expressions.  {now}  - Returns current UTC time in  RFC 1123 format .  {now:FORMAT}  - Returns current UTC time in the specified format. See  Formatting  for the available patterns.   JagTag:  The time is  {now}  and the current date is  {now:D.MM.YYYY}  Command:  ++tag example  Result:  The time is {{currenttime}} and the current date is {{currentdate}}    {time:EPOCH_MILLISECONDS|FORMAT}  - Parses a  Date.now()  expression to the provided format. If no format is supplied, the  RFC 1123 format  is used. See  Formatting  for the available patterns.   JagTag:  {{now}} formatted to RFC 1123 is  {time:{{now}}}  Command:  ++tag example  Result:  {{now}} formatted to RFC 1123 is {{nowrfc}}",
            "title": "Time method reference"
        },
        {
            "location": "/users/methods/time/#formatting",
            "text": "JagTag-JS utilises  Moment.js  for time parsing. Here is a list of available tokens.",
            "title": "Formatting"
        },
        {
            "location": "/users/methods/time/#year-month-and-day",
            "text": "Input  Example  Description      YYYY  2014  Two- or four-digit year.    YY  14  Two-digit year.    Y  -25  Year with any number of digits and sign.    Q  1 to 4  Quarter of year. Sets month to first month in quarter.    M   MM  1 to 12  Month number.    MMM   MMMM  Jan to December  Month name in locale.    D   DD  1 to 31  Day of month.    Do  1 st  to 31 st  Day of month with ordinal.    DDD   DDDD  1 to 365  Day of year.    X  1410715640.579  Unix timestamp.    x  1410715640579  Unix millisecond timestamp.",
            "title": "Year, month and day"
        },
        {
            "location": "/users/methods/time/#week-year-week-and-weekday",
            "text": "Input  Example  Description      gggg  2014  Locale four-digit week year.    gg  14  Locale two-digit week year.    w   ww  1 to 53  Locale week of year.    e  0 to 6  Locale day of week.    ddd   dddd  Mon to Sunday  Day name in locale.    GGGG  2014  ISO four-digit week year.    GG  14  ISO two-digit week year.    W   WW  1 to 53  ISO week of year.    E  1 to 7  ISO day of week.",
            "title": "Week year, week and weekday"
        },
        {
            "location": "/users/methods/time/#hour-minute-second-millisecond-and-time-offset",
            "text": "Input  Example  Description      H   HH  0 to 23  Hours (24 hour time).    h   hh  1 to 12  Hours (12 hour time used with  a   A ).    k   kk  1 to 24  Hours (24 hour time from 1 to 24).    a   A  am pm  Post or ante meridiem (Note that the single \"a\" and \"p\" characters are also considered valid).    m   mm  0 to 59  Minutes.    s   ss  0 to 59  Seconds.    S   SS   SSS  0 to 999  Fractional seconds.    Z   ZZ  +12:00  Offset from UTC as  +-HH:mm ,  +-HHmm  or  Z .",
            "title": "Hour, minute, second, millisecond and time offset"
        },
        {
            "location": "/users/methods/variables/",
            "text": "Variable method reference\n\u00b6\n\n\nThese methods get and set variables in a string. The values of the variables are not persistent after the tags are run, and as such have to be defined before they are called.\n\n\n{set:NAME|VALUE}\n - Sets a variable \nNAME\n to be \nVALUE\n. This is removed at runtime and not visible in the result.\n\n\n\n\nJagTag:\n \n{set:foo|bar}\n foo is now bar\n\n\nCommand:\n ++tag example\n\n\nResult:\n foo is now bar\n\n\n\n\n{get:NAME}\n - Gets the variable \nNAME\n. The variable must exist, otherwise the variable will be \nundefined\n.\n\n\n\n\nJagTag:\n \n{set:foo|bar}\n The variable foo is \n{get:foo}\n\n\nCommand:\n ++tag example\n\n\nResult:\n The variable foo is bar",
            "title": "Variables"
        },
        {
            "location": "/users/methods/variables/#variable-method-reference",
            "text": "These methods get and set variables in a string. The values of the variables are not persistent after the tags are run, and as such have to be defined before they are called.  {set:NAME|VALUE}  - Sets a variable  NAME  to be  VALUE . This is removed at runtime and not visible in the result.   JagTag:   {set:foo|bar}  foo is now bar  Command:  ++tag example  Result:  foo is now bar   {get:NAME}  - Gets the variable  NAME . The variable must exist, otherwise the variable will be  undefined .   JagTag:   {set:foo|bar}  The variable foo is  {get:foo}  Command:  ++tag example  Result:  The variable foo is bar",
            "title": "Variable method reference"
        }
    ]
}